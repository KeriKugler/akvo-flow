 <section class="fullWidth" id="excelImport">
    {{#view FLOW.chartView}}
    <div class="">
        <h1>Reports</h1>
        {{view Ember.Select 
      contentBinding="FLOW.surveyGroupControl.content" 
      selectionBinding="FLOW.selectedControl.selectedSurveyGroup" 
      optionLabelPath="content.code" 
      optionValuePath="content.keyId" 
      prompt="Select survey group"}}<br/>

      {{view Ember.Select 
        contentBinding="FLOW.surveyControl.content" 
        selectionBinding="FLOW.selectedControl.selectedSurveyAllQuestions" 
        optionLabelPath="content.code" 
        optionValuePath="content.keyId" 
        prompt="Select survey"}} <br/>

        {{view Ember.Select 
        contentBinding="FLOW.questionControl.content" 
        selectionBinding="FLOW.selectedControl.selectedQuestion" 
        optionLabelPath="content.text" 
        optionValuePath="content.keyId" 
        prompt="Select question"}}<br/><br/>
        
        <a {{action getChartData target="this"}} class="standardBtn"> {{t _build_chart}} </a>
        <br><br>
        <h3>{{FLOW.chartDataControl.questionText}}</h3>

        <div id="piechart"></div>

        </p>
    </div>
{{/view}}

 <script type="text/javascript">

function deleteChart(){
  $('#piechart').empty();
}

function createChart(){
    var canvasWidth = 800, //width
      canvasHeight = 300,   //height
      outerRadius = 100,   //radius
      labelRadius = 140,   //radius
      color = d3.scale.category20(); //builtin range of colors

    var dataSet = FLOW.chartDataControl.get('chartData');
    
    var vis = d3.select("#piechart")
      .append("svg:svg") //create the SVG element inside the <body>
        .data([dataSet]) //associate our data with the document
        .attr("width", canvasWidth) //set the width of the canvas
        .attr("height", canvasHeight) //set the height of the canvas
        .append("svg:g") //make a group to hold our pie chart
        .attr("transform", "translate(" + 0.5*canvasWidth + "," + 0.5*canvasHeight + ")") // relocate center of pie to 'outerRadius,outerRadius'

    // This will create <path> elements for us using arc data...
    var arc = d3.svg.arc()
      .outerRadius(outerRadius)
      .innerRadius(outerRadius-50);

    var pie = d3.layout.pie() //this will create arc data for us given a list of values
      .value(function(d) { return d.magnitude; }) // Binding each value to the pie
      .sort( function(d) { return null; } );

    // Select all <g> elements with class slice (there aren't any yet)
    var arcs = vis.selectAll("g.slice")
      // Associate the generated pie data (an array of arcs, each having startAngle,
      // endAngle and value properties) 
      .data(pie)
      // This will create <g> elements for every "extra" data element that should be associated
      // with a selection. The result is creating a <g> for every object in the data array
      .enter()
      // Create a group to hold each slice (we will have a <path> and a <text>
      // element associated with each slice)
      .append("svg:g")
      .attr("class", "slice");    //allow us to style things in the slices (like text)

    arcs.append("svg:path")
      //set the color for each slice to be chosen from the color function defined above
      .attr("fill", function(d, i) { return color(i); } )
      //this creates the actual SVG path using the associated data (pie) with the arc drawing function
      .attr("d", arc);

    // Add a legendLabel to each arc slice...
    arcs.append("svg:text")
      .attr("transform", function(d) {
        var c = arc.centroid(d),
          x = c[0],
          y = c[1],
          // pythagorean theorem for hypotenuse
          h = Math.sqrt(x*x + y*y);
          return "translate(" + (x/h * labelRadius) +  ',' + (y/h * labelRadius) +  ")"; 
        })
      .attr("text-anchor", function(d) {
        // are we past the center?
        return (d.endAngle + d.startAngle)/2 > Math.PI ? "end" : "start";
      })
      .style("fill", "Purple")
      .style("font", "bold 12px Arial")
      .text(function(d, i) { return dataSet[i].legendLabel; }); //get the label from our original data array

       // Add a legendLabel to each arc slice...
    vis.append("svg:text")
      .attr("text-anchor", "middle")
      .style("fill", "Purple")
      .style("font", "bold 12px Arial")
      .text("Total:") //get the label from our original data array
      .attr("transform","translate(0,-15)");

    vis.append("svg:text")
      .attr("text-anchor", "middle")
      .style("fill", "Purple")
      .style("font", "bold 12px Arial")
      .text("answers") //get the label from our original data array
      .attr("transform","translate(0,15)");

    vis.append("svg:text")
      .attr("text-anchor", "middle")
      .style("fill", "Purple")
      .style("font", "bold 12px Arial")
      .text(FLOW.chartDataControl.total.toString()) //get the label from our original data array
      .attr("transform","translate(0,0)");

    // Computes the angle of an arc, converting from radians to degrees.
    function angle(d) {
      var a = (d.startAngle + d.endAngle) * 90 / Math.PI - 90;
      return a > 90 ? a - 180 : a;
    }
}
        
    </script>
    </section>